package com.example.demo.service.impl;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import com.example.demo.dto.APIResponseDto;
import com.example.demo.dto.DepartmentDto;
import com.example.demo.dto.EmployeeDto;
import com.example.demo.entity.Employee;
import com.example.demo.mapper.EmployeeMapper;
import com.example.demo.repository.EmployeeRepository;
import com.example.demo.service.APIClient;
import com.example.demo.service.EmployeeService;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class EmployeeServiceImpl implements EmployeeService {

	private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeServiceImpl.class);

    private EmployeeRepository employeeRepository;
    
    
//    private RestTemplate restTemplate;
    
	private WebClient webClient;
    
    private APIClient apiClient;
    
    
	  @Override
	    public EmployeeDto saveEmployee(EmployeeDto employeeDto) {

	        Employee employee = EmployeeMapper.mapToEmployee(employeeDto);

	        Employee saveDEmployee = employeeRepository.save(employee);

	        EmployeeDto savedEmployeeDto = EmployeeMapper.mapToEmployeeDto(saveDEmployee);

	        return savedEmployeeDto;
	    }
	  @CircuitBreaker(name="${spring.applicaton.name}", fallbackMethod ="getDefaultDepartment" )
	  public APIResponseDto getEmployeeById(Long employeeId) {
		  
		  Employee employee = employeeRepository.findById(employeeId).get();
		  
//		  ResponseEntity<DepartmentDto> responseEntity =  restTemplate.getForEntity("http://localhost:8080/api/departments/"+employee.getDepartmentCode(),DepartmentDto.class );
		  DepartmentDto departmentDto = webClient
		 .get()
		 .uri("http://localhost:8082/api/departments/"+employee.getDepartmentCode())
		 .retrieve()
		 .bodyToMono(DepartmentDto.class)
		 .block(); 
		  
		  /*
		   * This method uses the WebClient instance to perform a GET request to the specified URI,
		   * which includes the department code of the employee.
		   * The retrieve() method is used to get a ResponseSpec for the request,
		   * which is an asynchronous operation that doesn't block or wait for the request itself.
		   * The bodyToMono() method is then called to convert the response body to a Mono of DepartmentDto objects.
		   * Finally, the block() method is called to wait for the response
		   * and 
		   * return the DepartmentDto object.*/
//		  DepartmentDto departmentDto  = apiClient.getDepartment(employee.getDepartmentCode());
		  APIResponseDto apiResponseDto = new APIResponseDto();
		  
		  
		  EmployeeDto employeeDto = EmployeeMapper.mapToEmployeeDto(employee);
		  
		  apiResponseDto.setDepartmentDto(departmentDto);
		  apiResponseDto.setEmployeeDto(employeeDto);
		  
		  return apiResponseDto;
	  }

	  public APIResponseDto getDefaultDepartment(Long employeeId,Exception exception) {
		  Employee employee = employeeRepository.findById(employeeId).get();
		  
		  
		  
		  DepartmentDto departmentDto = new DepartmentDto();
		  departmentDto.setDepartmentName("R&D Department");
		  departmentDto.setDepartmentCode("RD0003");
		  departmentDto.setDepartmentDescription("Research and Development Department");
		  
		  
		  EmployeeDto employeeDto = EmployeeMapper.mapToEmployeeDto(employee);
		  
		  
		  APIResponseDto apiResponseDto = new APIResponseDto();
		  apiResponseDto.setDepartmentDto(departmentDto);
		  apiResponseDto.setEmployeeDto(employeeDto);
		  
		  return apiResponseDto;
	  }

}
